// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User model for storing GitHub user information
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  githubId      String    @unique
  githubUsername String
  name          String?
  email         String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  stellarKeypairs StellarKeypair[]
  deployments     Deployment[]
  repositories    Repository[]
  buildConfig     BuildConfig?

  @@map("users")
}

// Stellar keypair model
model StellarKeypair {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId

  // Testnet keypair
  testnetPublicKey  String?
  testnetSecretKey  String?   // Encrypted in production
  testnetFunded     Boolean  @default(false)

  // Mainnet keypair
  mainnetPublicKey  String?
  mainnetSecretKey  String?   // Encrypted in production
  mainnetFunded     Boolean  @default(false)

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // User relationship
  userId            String   @db.ObjectId
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relationships
  deployments       Deployment[]

  @@map("stellar_keypairs")
}

// Repository model for storing GitHub repository information
model Repository {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  githubId    Int      @unique
  name        String
  fullName    String
  description String?
  htmlUrl     String
  cloneUrl    String
  language    String?
  private     Boolean  @default(false)
  stargazers  Int      @default(0)
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  // User relationship
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relationships
  deployments Deployment[]

  @@map("repositories")
}

// Template model for storing Soroban contract templates
model Template {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String
  difficulty  String   // Beginner, Intermediate, Advanced
  category    String   // DeFi, NFT, Governance, etc.
  repoUrl     String
  features    String[] // Array of feature strings
  tags        String[] // Array of tag strings
  iconType    String   // For UI icon selection
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  deployments Deployment[]

  @@map("templates")
}

// Deployment model for tracking contract deployments
model Deployment {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  contractAddress String?          // Contract address after deployment
  network         String           @default("testnet")
  status          DeploymentStatus @default(PENDING)
  buildLogs       String?          // Build output logs
  deployLogs      String?          // Deployment logs
  errorMessage    String?          // Error message if failed
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deployedAt      DateTime?        // When deployment completed

  // Relationships
  userId          String           @db.ObjectId
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  stellarKeypairId String          @db.ObjectId
  stellarKeypair   StellarKeypair  @relation(fields: [stellarKeypairId], references: [id])

  // Optional: Either from repository OR template
  repositoryId    String?          @db.ObjectId
  repository      Repository?      @relation(fields: [repositoryId], references: [id])

  templateId      String?          @db.ObjectId
  template        Template?        @relation(fields: [templateId], references: [id])

  @@map("deployments")
}

// Enum for deployment status
enum DeploymentStatus {
  PENDING
  BUILDING
  BUILD_FAILED
  DEPLOYING
  DEPLOYED
  DEPLOY_FAILED
  CANCELLED
}

// Build configuration model
model BuildConfig {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  autoFundTestnet Boolean  @default(true)
  defaultNetwork  String   @default("testnet")
  buildNotifications Boolean @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // User relationship
  userId          String   @unique @db.ObjectId
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("build_configs")
}
